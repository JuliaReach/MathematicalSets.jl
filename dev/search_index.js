var documenterSearchIndex = {"docs":
[{"location":"about/#About","page":"About","title":"About","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This page contains some general information about this project, and recommendations about contributing.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Pages = [\"about.md\"]","category":"page"},{"location":"about/#Contributing","page":"About","title":"Contributing","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"If you like this package, consider contributing! You can send bug reports (or fix them and send your code), add examples to the documentation, or propose new features.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Below some conventions that we follow when contributing to this package are detailed. For specific guidelines on documentation, see the Documentations Guidelines wiki.","category":"page"},{"location":"about/#Branches-and-pull-requests-(PR)","page":"About","title":"Branches and pull requests (PR)","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"We use a standard pull request policy: You work in a private branch and eventually add a pull request, which is then reviewed by other programmers and merged into the master branch.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Each pull request should be pushed in a new branch with the name of the author followed by a descriptive name, e.g., mforets/my_feature. If the branch is associated to a previous discussion in one issue, we use the name of the issue for easier lookup, e.g., mforets/7.","category":"page"},{"location":"about/#Unit-testing-and-continuous-integration-(CI)","page":"About","title":"Unit testing and continuous integration (CI)","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This project is synchronized with GitHub Actions such that each PR gets tested before merging (and the build is automatically triggered after each new commit). For the maintainability of this project, it is important to make all unit tests pass.","category":"page"},{"location":"about/","page":"About","title":"About","text":"To run the unit tests locally, you can do:","category":"page"},{"location":"about/","page":"About","title":"About","text":"julia> using Pkg\n\njulia> Pkg.test(\"MathematicalSets\")","category":"page"},{"location":"about/","page":"About","title":"About","text":"We also advise adding new unit tests when adding new features to ensure long-term support of your contributions.","category":"page"},{"location":"about/#Contributing-to-the-documentation","page":"About","title":"Contributing to the documentation","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"New functions and types should be documented according to our guidelines directly in the source code.","category":"page"},{"location":"about/","page":"About","title":"About","text":"You can view the source code documentation from inside the REPL by typing ? followed by the name of the type or function. For example, the following command will print the documentation of the AbstractSet type:","category":"page"},{"location":"about/","page":"About","title":"About","text":"julia> ?AbstractSet","category":"page"},{"location":"about/","page":"About","title":"About","text":"This documentation you are currently reading is written in Markdown, and it relies on Documenter.jl to produce the HTML layout. The sources for creating this documentation are found in docs/src. You can easily include the documentation that you wrote for your functions or types there (see the Documenter.jl guide or our sources for examples).","category":"page"},{"location":"about/","page":"About","title":"About","text":"To generate the documentation locally, run make.jl, e.g., by executing the following command in the terminal:","category":"page"},{"location":"about/","page":"About","title":"About","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"about/","page":"About","title":"About","text":"Note that this also runs all doctests which will take some time.","category":"page"},{"location":"about/#Related-projects","page":"About","title":"Related projects","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"See also MathematicalSystems related projects.","category":"page"},{"location":"about/#Credits","page":"About","title":"Credits","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"These persons have contributed to MathematicalSets.jl (in alphabetic order):","category":"page"},{"location":"about/","page":"About","title":"About","text":"Marcelo Forets\nBenoît Legat\nChristian Schilling","category":"page"},{"location":"lib/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"lib/types/","page":"Types","title":"Types","text":"This section describes systems types implemented in MathematicalSets.jl.","category":"page"},{"location":"lib/types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]\nDepth = 3","category":"page"},{"location":"lib/types/#Abstract-Set","page":"Types","title":"Abstract Set","text":"","category":"section"},{"location":"lib/types/#MathematicalSets.AbstractSet","page":"Types","title":"MathematicalSets.AbstractSet","text":"AbstractSet\n\nAbstract supertype for all set types.\n\n\n\n\n\n","category":"type"},{"location":"#MathematicalSets.jl","page":"Home","title":"MathematicalSets.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MathematicalSets is a Julia package for mathematical sets interfaces.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An abstract type for mathematical sets.\nGeneric and flexible functions to operate with sets.","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"lib/types.md\",\n    \"lib/methods.md\"\n]\nDepth = 2","category":"page"},{"location":"lib/methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"lib/methods/","page":"Methods","title":"Methods","text":"This section describes systems methods implemented in MathematicalSets.jl.","category":"page"},{"location":"lib/methods/","page":"Methods","title":"Methods","text":"Pages = [\"methods.md\"]\nDepth = 3","category":"page"},{"location":"lib/methods/#Metric-properties","page":"Methods","title":"Metric properties","text":"","category":"section"},{"location":"lib/methods/#MathematicalSets.surface_area","page":"Methods","title":"MathematicalSets.surface_area","text":"surface_area(S::AbstractSet)\n\nReturn the surface area of the given set.\n\nInput\n\nS – set\n\nOutput\n\nA number.\n\nNotes\n\nThe surface_area refers to the surface area of the set with respect to some measure. The actual notion of surface adopted is left to the package implementing this function.\n\n\n\n\n\n","category":"function"},{"location":"lib/methods/#MathematicalSets.volume","page":"Methods","title":"MathematicalSets.volume","text":"volume(S::AbstractSet)\n\nReturn the volume of the given set.\n\nInput\n\nS – set\n\nOutput\n\nA number.\n\nNotes\n\nThe volume refers to the volume of the set with respect to some measure. The actual notion of volume adopted is left to the package implementing this function.\n\n\n\n\n\n","category":"function"},{"location":"lib/methods/#Topological-properties","page":"Methods","title":"Topological properties","text":"","category":"section"},{"location":"lib/methods/#MathematicalSets.dimension","page":"Methods","title":"MathematicalSets.dimension","text":"dimension(S::AbstractSet)\n\nReturn the dimension of the given set.\n\nInput\n\nS – set\n\nOutput\n\nAn integer.\n\nNotes\n\nThe actual notion of dimension adopted is left to the package implementing this function.\n\nFor instance, in many applications dimension refers to the dimension of the affine hull of the set. For example, a line in an n-dimensional space has dimension equal to 1, even if the dimension of the space is n. However, in other domains, e.g. semialgebraic sets, dimension is not the dimension of its affine hull.\n\nSee also space_dimension(::AbstractSet) for the ambient dimension of the set.\n\n\n\n\n\n","category":"function"},{"location":"lib/methods/#MathematicalSets.space_dimension","page":"Methods","title":"MathematicalSets.space_dimension","text":"space_dimension(S::AbstractSet)\n\nReturn the space dimension of the given set.\n\nInput\n\nS – set\n\nOutput\n\nAn integer.\n\nNotes\n\nThe space_dimension refers to the ambient dimension of the set. For example, a line in an n-dimensional space has space_dimension equal to n, even if the dimension of its affine hull is 1.\n\nSee also dimension(::AbstractSet) for the dimension of the set.\n\n\n\n\n\n","category":"function"}]
}
